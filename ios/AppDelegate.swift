//
//  AppDelegate.swift
//  RNNativeModule
//
//  Created by Bangkit Purbandoro on 04/03/21.
//

import UIKit
import Foundation
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  var bridge: RCTBridge!
  var window: UIWindow?
  
  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
    // Override point for customization after application launch.
    /**
     * Loading JavaScript code - uncomment the one you want.
     *
     * OPTION 1
     * Load from development server. Start the server from the repository root:
     *
     * $ npm start
     *
     * To run on device, change `localhost` to the IP address of your computer
     * (you can get this by typing `ifconfig` into the terminal and selecting the
     * `inet` value under `en0:`) and make sure your computer and iOS device are
     * on the same Wi-Fi network.
     */
    
    let jsCodeLocation = URL(string: "http://192.168.1.6:8081/index.bundle?platform=ios&dev=true")
    
    /**
     * OPTION 2
     * Load from pre-bundled file on disk. The static bundle is automatically
     * generated by "Bundle React Native code and images" build step.
     */
    
    // let jsCodeLocation = Bundle.main.url(forResource: "main", withExtension: "jsbundle")
    
    #if FB_SONARKIT_ENABLED
      initializeFlipper(application)
    #endif
    
    guard let url = jsCodeLocation else {
      return false
    }
    
    let rootView = RCTRootView(bundleURL: url, moduleName: "RNNativeModule", initialProperties: nil, launchOptions: launchOptions)
    
    self.bridge = rootView.bridge
    if let eventEmitter = rootView.bridge.module(for: ConnectNativeModule.self) as? ConnectNativeModule {
      ConnectNativeModule.shared = eventEmitter
      DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
        eventEmitter.sendEventToReact(withName: .alarm, body: ["test": "param"])
      }
    }
    
    self.window = UIWindow(frame: UIScreen.main.bounds)
    let rootViewController = UIViewController()
    
    rootViewController.view = rootView
    
    self.window!.rootViewController = rootViewController;
    self.window!.makeKeyAndVisible()
    
    UNUserNotificationCenter.current().delegate = self
    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { [weak self] success, error in
      if success {
        self?.createLocalNotification("Pill 1", title: "Pill 1", body: "Minum Pill1", hour: 14, minute: 18)
        self?.createLocalNotification("Pill 2", title: "Pill 2", body: "Minum Pill2", hour: 14, minute: 20)
      } else if let error = error {
        print("\(error.localizedDescription)")
      }
    }
    
    return true
  }
  
  private func createLocalNotification(_ id: String, title: String, body: String, hour: Int? = nil, minute: Int? = nil) {
    let content = UNMutableNotificationContent()
    content.title = title
    content.body = body
    content.sound = .default
    
    var dateComponent = DateComponents()
    dateComponent.calendar = .current
    if let hour = hour {
      dateComponent.hour = hour
    }
    if let minute = minute {
      dateComponent.minute = minute
    }
    
    //let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponent, repeats: true)
    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 60, repeats: true)
    let request = UNNotificationRequest(identifier: id, content: content, trigger: trigger)
    let notificationCenter = UNUserNotificationCenter.current()
    notificationCenter.add(request) { error in
      if let error = error {
        print("error \(error.localizedDescription)")
      } else {
        print("success")
      }
    }
  }
}

extension AppDelegate: UNUserNotificationCenterDelegate {
  func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
    print("Identifier : \(response.notification.request.identifier)")
    print("Request: \(response.notification.request)")
  }
  
  func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
    print("Identifier : \(notification.request.identifier)")
    print("Request: \(notification.request)")
  }
}

#if FB_SONARKIT_ENABLED
func initializeFlipper(_ application: UIApplication) {
  let client: FlipperClient = FlipperClient.shared()
  let layoutDescriptorMapper: SKDescriptorMapper = SKDescriptorMapper()
  let flipperKitLayoutPlugin: FlipperKitLayoutPlugin = FlipperKitLayoutPlugin(rootNode: application, with: layoutDescriptorMapper)
  let flipperKitDefaultPlugin: FKUserDefaultsPlugin = FKUserDefaultsPlugin(suiteName: nil)
  let flipperKitNetworkPlugin: FlipperKitNetworkPlugin = FlipperKitNetworkPlugin(networkAdapter: SKIOSNetworkAdapter())
  
  client.add(flipperKitLayoutPlugin)
  client.add(flipperKitDefaultPlugin)
  client.add(flipperKitNetworkPlugin)
  client.start()
}
#endif
